{"version":3,"sources":["../src/Aria2.js"],"names":["JSONRPCClient","require","prefix","str","startsWith","unprefix","suffix","split","Aria2","addSecret","parameters","params","secret","Array","isArray","concat","_onnotification","notification","method","event","emit","call","multicall","calls","multi","map","methodName","batch","listNotifications","events","listMethods","methods","Object","assign","defaultOptions","secure","host","port","path","module","exports"],"mappings":"AAAA;;;;;;AAEA,MAAMA,aAAa,GAAGC,OAAO,CAAC,iBAAD,CAA7B;;AAEA,SAASC,MAAT,CAAgBC,GAAhB,EAAqB;AACnB,MAAI,CAACA,GAAG,CAACC,UAAJ,CAAe,SAAf,CAAD,IAA8B,CAACD,GAAG,CAACC,UAAJ,CAAe,QAAf,CAAnC,EAA6D;AAC3DD,IAAAA,GAAG,GAAG,WAAWA,GAAjB;AACD;;AACD,SAAOA,GAAP;AACD;;AAED,SAASE,QAAT,CAAkBF,GAAlB,EAAuB;AACrB,QAAMG,MAAM,GAAGH,GAAG,CAACI,KAAJ,CAAU,QAAV,EAAoB,CAApB,CAAf;AACA,SAAOD,MAAM,IAAIH,GAAjB;AACD;;AAED,MAAMK,KAAN,SAAoBR,aAApB,CAAkC;AAChCS,EAAAA,SAAS,CAACC,UAAD,EAAa;AACpB,QAAIC,MAAM,GAAG,KAAKC,MAAL,GAAc,CAAC,WAAW,KAAKA,MAAjB,CAAd,GAAyC,EAAtD;;AACA,QAAIC,KAAK,CAACC,OAAN,CAAcJ,UAAd,CAAJ,EAA+B;AAC7BC,MAAAA,MAAM,GAAGA,MAAM,CAACI,MAAP,CAAcL,UAAd,CAAT;AACD;;AACD,WAAOC,MAAP;AACD;;AAEDK,EAAAA,eAAe,CAACC,YAAD,EAAe;AAAA,UACpBC,MADoB,GACDD,YADC,CACpBC,MADoB;AAAA,UACZP,MADY,GACDM,YADC,CACZN,MADY;AAE5B,UAAMQ,KAAK,GAAGd,QAAQ,CAACa,MAAD,CAAtB;AACA,QAAIC,KAAK,KAAKD,MAAd,EAAsB,KAAKE,IAAL,CAAUD,KAAV,EAAiBR,MAAjB;AACtB,WAAO,MAAMK,eAAN,CAAsBC,YAAtB,CAAP;AACD;;AAEKI,EAAAA,IAAN,CAAWH,MAAX,EAAmB,GAAGP,MAAtB,EAA8B;AAAA;AAAA;;AAAA;AAC5B,aAAO,oBAAWT,MAAM,CAACgB,MAAD,CAAjB,EAA2B,KAAI,CAACT,SAAL,CAAeE,MAAf,CAA3B,CAAP;AAD4B;AAE7B;;AAEKW,EAAAA,SAAN,CAAgBC,KAAhB,EAAuB;AAAA;AAAA;;AAAA;AACrB,YAAMC,KAAK,GAAG,CACZD,KAAK,CAACE,GAAN,CAAU,CAAC,CAACP,MAAD,EAAS,GAAGP,MAAZ,CAAD,KAAyB;AACjC,eAAO;AAAEe,UAAAA,UAAU,EAAExB,MAAM,CAACgB,MAAD,CAApB;AAA8BP,UAAAA,MAAM,EAAE,MAAI,CAACF,SAAL,CAAeE,MAAf;AAAtC,SAAP;AACD,OAFD,CADY,CAAd;AAKA,aAAO,qBAAW,kBAAX,EAA+Ba,KAA/B,CAAP;AANqB;AAOtB;;AAEKG,EAAAA,KAAN,CAAYJ,KAAZ,EAAmB;AAAA;AAAA;;AAAA;AACjB,aAAO,qBACLA,KAAK,CAACE,GAAN,CAAU,CAAC,CAACP,MAAD,EAAS,GAAGP,MAAZ,CAAD,KAAyB,CACjCT,MAAM,CAACgB,MAAD,CAD2B,EAEjC,MAAI,CAACT,SAAL,CAAeE,MAAf,CAFiC,CAAnC,CADK,CAAP;AADiB;AAOlB;;AAEKiB,EAAAA,iBAAN,GAA0B;AAAA;;AAAA;AACxB,YAAMC,MAAM,SAAS,MAAI,CAACR,IAAL,CAAU,0BAAV,CAArB;AACA,aAAOQ,MAAM,CAACJ,GAAP,CAAWN,KAAK,IAAId,QAAQ,CAACc,KAAD,CAA5B,CAAP;AAFwB;AAGzB;;AAEKW,EAAAA,WAAN,GAAoB;AAAA;;AAAA;AAClB,YAAMC,OAAO,SAAS,MAAI,CAACV,IAAL,CAAU,oBAAV,CAAtB;AACA,aAAOU,OAAO,CAACN,GAAR,CAAYP,MAAM,IAAIb,QAAQ,CAACa,MAAD,CAA9B,CAAP;AAFkB;AAGnB;;AA9C+B;;AAiDlCc,MAAM,CAACC,MAAP,CAAczB,KAAd,EAAqB;AAAEN,EAAAA,MAAF;AAAUG,EAAAA;AAAV,CAArB;AAEAG,KAAK,CAAC0B,cAAN,GAAuBF,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBjC,aAAa,CAACkC,cAAhC,EAAgD;AACrEC,EAAAA,MAAM,EAAE,KAD6D;AAErEC,EAAAA,IAAI,EAAE,WAF+D;AAGrEC,EAAAA,IAAI,EAAE,IAH+D;AAIrEzB,EAAAA,MAAM,EAAE,EAJ6D;AAKrE0B,EAAAA,IAAI,EAAE;AAL+D,CAAhD,CAAvB;AAQAC,MAAM,CAACC,OAAP,GAAiBhC,KAAjB","sourcesContent":["\"use strict\";\n\nconst JSONRPCClient = require(\"./JSONRPCClient\");\n\nfunction prefix(str) {\n  if (!str.startsWith(\"system.\") && !str.startsWith(\"aria2.\")) {\n    str = \"aria2.\" + str;\n  }\n  return str;\n}\n\nfunction unprefix(str) {\n  const suffix = str.split(\"aria2.\")[1];\n  return suffix || str;\n}\n\nclass Aria2 extends JSONRPCClient {\n  addSecret(parameters) {\n    let params = this.secret ? [\"token:\" + this.secret] : [];\n    if (Array.isArray(parameters)) {\n      params = params.concat(parameters);\n    }\n    return params;\n  }\n\n  _onnotification(notification) {\n    const { method, params } = notification;\n    const event = unprefix(method);\n    if (event !== method) this.emit(event, params);\n    return super._onnotification(notification);\n  }\n\n  async call(method, ...params) {\n    return super.call(prefix(method), this.addSecret(params));\n  }\n\n  async multicall(calls) {\n    const multi = [\n      calls.map(([method, ...params]) => {\n        return { methodName: prefix(method), params: this.addSecret(params) };\n      })\n    ];\n    return super.call(\"system.multicall\", multi);\n  }\n\n  async batch(calls) {\n    return super.batch(\n      calls.map(([method, ...params]) => [\n        prefix(method),\n        this.addSecret(params)\n      ])\n    );\n  }\n\n  async listNotifications() {\n    const events = await this.call(\"system.listNotifications\");\n    return events.map(event => unprefix(event));\n  }\n\n  async listMethods() {\n    const methods = await this.call(\"system.listMethods\");\n    return methods.map(method => unprefix(method));\n  }\n}\n\nObject.assign(Aria2, { prefix, unprefix });\n\nAria2.defaultOptions = Object.assign({}, JSONRPCClient.defaultOptions, {\n  secure: false,\n  host: \"localhost\",\n  port: 6800,\n  secret: \"\",\n  path: \"/jsonrpc\"\n});\n\nmodule.exports = Aria2;\n"],"file":"Aria2.js"}